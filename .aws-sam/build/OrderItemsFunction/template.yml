AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Resources:
  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: index.ordersHandler
      Runtime: nodejs20.x
      Environment:
        Variables:
          REDIS_ENDPOINT: !GetAtt MyElasticacheRedis.RedisEndpoint.Address
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /orders
            Method: post

  OrderItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: index.orderItemsHandler
      Runtime: nodejs20.x
      Events:
        OrderItemsApiEvent:
          Type: Api
          Properties:
            Path: /orderItems
            Method: post

  OrdersByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: index.ordersByIdHandler
      Runtime: nodejs20.x
      Events:
        OrdersByIdApiEvent:
          Type: Api
          Properties:
            Path: /orders/{orderId}
            Method: get

  BoxesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: index.boxesHandler
      Runtime: nodejs20.x
      Events:
        BoxesApiEvent:
          Type: Api
          Properties:
            Path: /boxes
            Method: get

  # # Add IAM roles with required tag permissions
  # OrderItemsFunctionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: MyOrderItemsFunctionRole
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  #     Tags:
  #       - Key: MyTag
  #         Value: MyValue

  # MyVPC:
  #   Type: AWS::EC2::VPC
  #   Properties:
  #     CidrBlock: 10.0.0.0/16

  # MySubnet:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref MyVPC
  #     CidrBlock: 10.0.0.0/24

  MyElasticacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for ElastiCache
      SubnetIds:
        - subnet-02c217f126c0ce1d5

  MyElasticacheRedis:
    Type: "AWS::ElastiCache::CacheCluster"
    Properties:
      CacheNodeType: cache.t2.micro
      Engine: redis
      NumCacheNodes: 1
      Port: 6379
      VpcSecurityGroupIds:
        - !GetAtt MySecurityGroup.GroupId
      CacheSubnetGroupName: !Ref MyElasticacheSubnetGroup

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId: vpc-066e6a637e37f2752
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 0.0.0.0/0
